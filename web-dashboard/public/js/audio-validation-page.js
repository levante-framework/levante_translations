(function(){
	const { createApp, ref, computed, onMounted } = Vue;
	function base(name){ const i=name.lastIndexOf('/'); return i>=0?name.slice(i+1):name; }
	function stripExt(n){ return n.replace(/\.[a-zA-Z0-9]+$/, ''); }
	function resolveUrls(lang,itemId){ const urls=[]; if (lang && itemId){ urls.push(`https://raw.githubusercontent.com/levante-framework/levante_translations/main/audio_files/${encodeURIComponent(lang)}/${encodeURIComponent(itemId)}.mp3`); urls.push(`https://storage.googleapis.com/levante-assets-dev/audio/${encodeURIComponent(lang)}/${encodeURIComponent(itemId)}.mp3`); if (lang.includes('-')){ const b=lang.split('-')[0]; urls.push(`https://raw.githubusercontent.com/levante-framework/levante_translations/main/audio_files/${encodeURIComponent(b)}/${encodeURIComponent(itemId)}.mp3`); urls.push(`https://storage.googleapis.com/levante-assets-dev/audio/${encodeURIComponent(b)}/${encodeURIComponent(itemId)}.mp3`); } } return urls; }
	async function playAny(urls){ for (const u of urls){ try{ await new Promise((resolve,reject)=>{ const a=new Audio(); a.src=u; a.addEventListener('canplaythrough',()=>{ a.play().then(resolve).catch(reject); },{once:true}); a.addEventListener('error',()=>reject(new Error('play failed')),{once:true}); }); return true; }catch(e){} } return false; }
	async function fetchVoiceTag(itemId, lang){ try{ const r=await fetch(`/api/read-tags?itemId=${encodeURIComponent(itemId)}&langCode=${encodeURIComponent(lang)}&source=repo`); if(!r.ok) return ''; const data=await r.json(); return data?.id3Tags?.voice || data?.id3Tags?.userDefinedText?.find?.(t=>t?.description==='voice')?.value || ''; }catch{ return ''; } }
	async function regenerateElevenLabs(text, preferredVoiceId){ const creds=getCredentials(); const key=creds.elevenlabs_api_key || creds.elevenlabsApiKey; if(!key) throw new Error('Missing ElevenLabs API key (open Credentials).'); let voiceId=preferredVoiceId || document.getElementById('elevenlabsVoice')?.value || ''; if(!voiceId) throw new Error('Could not determine voice. Set a voice in the main dashboard.'); const body={ text, model_id:'eleven_monolingual_v1', voice_settings:{ stability:0.5, similarity_boost:0.75 } }; const resp=await fetch(`/api/elevenlabs-proxy?voice_id=${encodeURIComponent(voiceId)}`,{ method:'POST', headers:{ 'Content-Type':'application/json','X-API-KEY':key }, body:JSON.stringify(body) }); if(!resp.ok){ throw new Error(`ElevenLabs error: ${resp.status}`); } const blob=await resp.blob(); const url=URL.createObjectURL(blob); const audio=new Audio(url); await new Promise((resolve,reject)=>{ audio.addEventListener('canplaythrough',()=>{ audio.play().then(resolve).catch(reject); },{once:true}); audio.addEventListener('error',()=>reject(new Error('regen play failed')),{once:true}); }); return { blob, url, voiceId }; }
	async function fetchVoiceIdFromId3(itemId, lang){ try{ const r=await fetch(`/api/read-tags?itemId=${encodeURIComponent(itemId)}&langCode=${encodeURIComponent(lang)}&source=repo`); if(!r.ok) return ''; const data=await r.json(); const vName = data?.id3Tags?.voice || data?.id3Tags?.userDefinedText?.find?.(t=>t?.description==='voice')?.value || ''; if(!vName) return ''; const sel=document.getElementById('elevenlabsVoice'); if(sel){ for(let i=0;i<sel.options.length;i++){ if (sel.options[i].text.trim().toLowerCase()===vName.trim().toLowerCase()) return sel.options[i].value; } } return ''; }catch{ return ''; } }
	function createVm(){ return createApp({ setup(){ const files=ref([]); const selectedFile=ref(''); const loading=ref(false); const error=ref(''); const results=ref([]); const sortKey=ref('similarity'); const sortAsc=ref(false); const displayLang=ref(''); const voiceName=ref(''); const decorated=computed(()=>results.value.map(r=>({ ...r, filename: base(r.audio_path||'') }))); const sortedRows=computed(()=>{ const rows=[...decorated.value]; const k=sortKey.value; rows.sort((a,b)=>{ if(k==='filename') return (a.filename||'').localeCompare(b.filename||''); if(k==='similarity') return ((a.basic_metrics||{}).similarity_ratio||0) - ((b.basic_metrics||{}).similarity_ratio||0); return 0; }); return sortAsc.value?rows:rows.reverse(); }); async function loadFiles(){ try{ const r=await fetch('/api/list-validation-files'); const d=await r.json(); files.value=(d.files||[]).sort().reverse(); if(!selectedFile.value&&files.value.length) selectedFile.value=files.value[0]; }catch(e){ error.value=String(e); } } async function loadSelected(){ if(!selectedFile.value) return; loading.value=true; error.value=''; try{ const r=await fetch(`/api/get-validation-file?name=${encodeURIComponent(selectedFile.value)}`); const d=await r.json(); results.value=Array.isArray(d)?d:[d]; const langs=new Set(results.value.map(x=>x.language).filter(Boolean)); displayLang.value=langs.size?Array.from(langs).join(', '):''; if(results.value.length){ const first=results.value[0]; const lang=(first.language||'').trim(); const id=stripExt(base(first.audio_path||'')); voiceName.value= await fetchVoiceTag(id, lang); } }catch(e){ error.value=String(e); } finally{ loading.value=false; } } function setSort(k){ if(sortKey.value===k){ sortAsc.value=!sortAsc.value; } else { sortKey.value=k; sortAsc.value=true; } } async function playRow(r){ const lang=(r.language||'').trim(); const id=stripExt(base(r.audio_path||'')); const urls=resolveUrls(lang,id); const ok=await playAny(urls); if(!ok) alert('Could not play existing audio.'); } async function regenAndPlay(r){ try{ const lang=(r.language||'').trim(); const id=stripExt(base(r.audio_path||'')); const preferred=await fetchVoiceIdFromId3(id, lang); await regenerateElevenLabs(r.expected_text||'', preferred); } catch(e){ alert(String(e)); } } onMounted(()=>{ loadFiles(); }); return { files, selectedFile, loading, error, results, sortedRows, summary:computed(()=>{ const sims=results.value.map(x=>(x.basic_metrics||{}).similarity_ratio).filter(x=>typeof x==='number'); if(!sims.length) return null; const avg=sims.reduce((a,b)=>a+b,0)/sims.length; return { count:sims.length, min:Math.min(...sims), max:Math.max(...sims), avg }; }), displayLang, voiceName, loadSelected, setSort, playRow, regenAndPlay }; } }); }
	if (document.readyState==='loading'){ document.addEventListener('DOMContentLoaded',()=>{ createVm().mount('#audio-validation-panel'); }); } else { createVm().mount('#audio-validation-panel'); }
})();
