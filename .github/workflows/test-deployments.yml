name: Deploy and Test

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-cloud-storage pandas
        
    - name: Install Node dependencies
      run: npm install
      
    - name: Validate CSV files exist
      run: |
        if [ -f "translation_text/item_bank_translations.csv" ]; then
          echo "‚úÖ Translation file found"
          wc -l translation_text/item_bank_translations.csv
        else
          echo "‚ùå Translation file missing"
          exit 1
        fi
      
    - name: Test Levante deployment (dry run)
      run: npm run deploy:levante-dev-dry
      env:
        # Mock credentials for testing
        GOOGLE_APPLICATION_CREDENTIALS_JSON: '{"type":"service_account","project_id":"test"}'
      
    - name: Test CSV utilities
      run: npm run fix:csv
      continue-on-error: true  # May fail without actual CSV issues
      
    - name: Validate npm scripts
      run: |
        npm run help
        echo "‚úÖ All npm scripts are properly configured"
    
    # Check if credentials are available
    - name: Check deployment credentials
      id: check-creds
      run: |
        # Check dev credentials
        if [ -n "$DEV_CREDS" ]; then
          echo "dev-credentials-available=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Dev deployment credentials are configured"
        else
          echo "dev-credentials-available=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Dev deployment credentials not configured"
        fi
        
        # Check prod credentials  
        if [ -n "$PROD_CREDS" ]; then
          echo "prod-credentials-available=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Prod deployment credentials are configured"
        else
          echo "prod-credentials-available=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Prod deployment credentials not configured"
        fi
        
        # Set overall credentials flag
        if [ -n "$DEV_CREDS" ] || [ -n "$PROD_CREDS" ]; then
          echo "credentials-available=true" >> $GITHUB_OUTPUT
        else
          echo "credentials-available=false" >> $GITHUB_OUTPUT
          echo "To enable deployment, add GOOGLE_APPLICATION_CREDENTIALS_JSON_DEV and/or GOOGLE_APPLICATION_CREDENTIALS_JSON_PROD secrets"
        fi
      env:
        DEV_CREDS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON_DEV }}
        PROD_CREDS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON_PROD }}
    
    # Deploy to dev bucket on PR for testing
    - name: Deploy to dev bucket (PR)
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && steps.check-creds.outputs.dev-credentials-available == 'true'
      run: |
        echo "üöÄ Deploying to dev environment..."
        npm run deploy:levante-dev
        echo "‚úÖ Dev deployment completed"
      env:
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON_DEV }}
      
    - name: Skip dev deployment (no credentials)
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && steps.check-creds.outputs.dev-credentials-available == 'false'
      run: |
        echo "‚è≠Ô∏è Skipping dev deployment - no dev credentials configured"
        echo "To enable dev deployment, add GOOGLE_APPLICATION_CREDENTIALS_JSON_DEV secret"
      
    # Deploy to dev bucket on main branch merge (for testing before prod)
    - name: Deploy to dev (main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check-creds.outputs.dev-credentials-available == 'true'
      run: |
        echo "üöÄ Deploying to dev environment..."
        npm run deploy:levante-dev
        echo "‚úÖ Dev deployment completed"
      env:
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON_DEV }}
        
    - name: Skip dev deployment (no credentials)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check-creds.outputs.dev-credentials-available == 'false'
      run: |
        echo "‚è≠Ô∏è Skipping dev deployment - no dev credentials configured"
        echo "To enable dev deployment, add GOOGLE_APPLICATION_CREDENTIALS_JSON_DEV secret"
        
    # Trigger core-tasks e2e tests after successful main branch push (regardless of deployment)
    - name: Trigger core-tasks e2e tests
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPO_DISPATCH_TOKEN }}
        repository: levante-framework/core-tasks
        event-type: translations-updated
        client-payload: |
          {
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "repository": "${{ github.repository }}",
            "deployment_environment": "dev",
            "translations_bucket": "levante-dashboard-dev",
            "triggered_by": "${{ github.actor }}",
            "workflow_run_id": "${{ github.run_id }}"
          }
      
    - name: Summary
      run: |
        echo "üéâ Workflow completed successfully!"
        echo "üìä Summary:"
        echo "   - Event: ${{ github.event_name }}"
        echo "   - Branch: ${{ github.ref }}"
        echo "   - Dev Credentials: ${{ steps.check-creds.outputs.dev-credentials-available == 'true' && '‚úÖ Configured' || '‚ö†Ô∏è Missing' }}"
        echo "   - Prod Credentials: ${{ steps.check-creds.outputs.prod-credentials-available == 'true' && '‚úÖ Configured' || '‚ö†Ô∏è Missing' }}"
        
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          if [ "${{ steps.check-creds.outputs.dev-credentials-available }}" = "true" ]; then
            echo "   - Action: ‚úÖ Tested and deployed to dev"
          else
            echo "   - Action: ‚úÖ Tested (dev deployment skipped - no dev credentials)"
          fi
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          if [ "${{ steps.check-creds.outputs.dev-credentials-available }}" = "true" ]; then
            echo "   - Action: ‚úÖ Tested, deployed to dev, and triggered core-tasks e2e tests"
          else
            echo "   - Action: ‚úÖ Tested and triggered core-tasks e2e tests (dev deployment skipped - no dev credentials)"
          fi
        else
          echo "   - Action: ‚úÖ Testing only"
        fi
        
        if [ "${{ steps.check-creds.outputs.dev-credentials-available }}" = "false" ] || [ "${{ steps.check-creds.outputs.prod-credentials-available }}" = "false" ]; then
          echo ""
          echo "üí° To enable automatic deployment:"
          echo "   1. Go to repository Settings ‚Üí Secrets and variables ‚Üí Actions"
          if [ "${{ steps.check-creds.outputs.dev-credentials-available }}" = "false" ]; then
            echo "   2. Add secret: GOOGLE_APPLICATION_CREDENTIALS_JSON_DEV"
          fi
          if [ "${{ steps.check-creds.outputs.prod-credentials-available }}" = "false" ]; then
            echo "   3. Add secret: GOOGLE_APPLICATION_CREDENTIALS_JSON_PROD"
          fi
          echo "   4. Value: Complete JSON from your service account key"
        fi
        
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo ""
          echo "üîó Core-tasks e2e tests:"
          if [ -n "${{ secrets.REPO_DISPATCH_TOKEN }}" ]; then
            echo "   ‚úÖ Will trigger automatically after main branch merge"
          else
            echo "   ‚ö†Ô∏è Requires REPO_DISPATCH_TOKEN secret to trigger core-tasks e2e tests"
          fi
        fi
    - name: Test CSV fix utility
      run: npm run fix:csv
      continue-on-error: true  # May fail without actual CSV issues
      
    - name: Validate package.json scripts
      run: |
        npm run help
        echo "‚úÖ All npm scripts are properly configured"
